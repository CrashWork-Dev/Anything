//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/Init.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Controller
{
    public partial class @Controller: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controller()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Init"",
    ""maps"": [
        {
            ""name"": ""Init"",
            ""id"": ""4883d771-b86b-4561-8ba4-7f97a1932665"",
            ""actions"": [
                {
                    ""name"": ""Player"",
                    ""type"": ""Value"",
                    ""id"": ""f0e94ecf-3f0c-4129-9ed4-6c5fd2062a41"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""eff1e780-b9f2-4b6c-96a6-058bcba9d5ed"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c63e6c7b-b08e-4f4d-81d4-be7e1096d5f3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4020bbc0-c0aa-488d-ac67-d91996c16efb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8cb695de-a9dd-4593-bd17-d6ba8ade3f55"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0951265a-37b6-452b-bf76-d30c39492e2f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Init
            m_Gaming = asset.FindActionMap("Init", throwIfNotFound: true);
            m_Gaming_Player = m_Gaming.FindAction("Player", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Init
        private readonly InputActionMap m_Gaming;
        private List<IGamingActions> m_GamingActionsCallbackInterfaces = new List<IGamingActions>();
        private readonly InputAction m_Gaming_Player;
        public struct GamingActions
        {
            private @Controller m_Wrapper;
            public GamingActions(@Controller wrapper) { m_Wrapper = wrapper; }
            public InputAction @Player => m_Wrapper.m_Gaming_Player;
            public InputActionMap Get() { return m_Wrapper.m_Gaming; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GamingActions set) { return set.Get(); }
            public void AddCallbacks(IGamingActions instance)
            {
                if (instance == null || m_Wrapper.m_GamingActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GamingActionsCallbackInterfaces.Add(instance);
                @Player.started += instance.OnPlayer;
                @Player.performed += instance.OnPlayer;
                @Player.canceled += instance.OnPlayer;
            }

            private void UnregisterCallbacks(IGamingActions instance)
            {
                @Player.started -= instance.OnPlayer;
                @Player.performed -= instance.OnPlayer;
                @Player.canceled -= instance.OnPlayer;
            }

            public void RemoveCallbacks(IGamingActions instance)
            {
                if (m_Wrapper.m_GamingActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGamingActions instance)
            {
                foreach (var item in m_Wrapper.m_GamingActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GamingActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GamingActions @Gaming => new GamingActions(this);
        public interface IGamingActions
        {
            void OnPlayer(InputAction.CallbackContext context);
        }
    }
}
